#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('websocket-study:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// ----- モジュールSocket.IOを用いてWebSocket通信を行う -----
// サーバー用Socket.IOモジュールのを読み込みつつ、引数にHTTPサーバーを受け取る
var io = require('socket.io')(server);
// クライアント用Socket.IOモジュールのを読み込み
var os = require('os');

// WebSocket接続に対してイベントserver-statusを発行する関数
function emitServerStatus(socket) { // 引数socketとして受け取るのはSocketオブジェクト
  // WebSocketの接続時に、イベント名:server-status、受け渡すデータ:{ ﾌﾟﾛﾊﾟﾃｨ名: ﾛｰﾄﾞｱﾍﾞﾚｰｼﾞﾃﾞｰﾀ }(<-JSON形式)で、イベントを発行する
  // socket.emit関数: 文字列で定義したイベントを、データと共に発行できる関数
  socket.emit('server-status', { loadavg: os.loadavg() });
  // イベント発行後にログを出力
  console.log('server-status event emitted.');
}

// WebSocket接続の確立時にemitServerStatus関数を定期的に呼び出す
io.on('connection', function (socket) { // 引数socketとして受け取るのはSocketオブジェクト
  // WebSocket接続が確立した時に発行されるイベントconnectionの受け取り時に実行されるコールバック関数
  // 10ms毎に、emitServerStatus関数へ引数socket(=Socketオブジェクト)を渡しつつ呼び出す
  setInterval(emitServerStatus, 10, socket);
});
